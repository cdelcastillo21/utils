" vimrc for TACC Frontera dev environment 
"
set nocompatible " Must be the first line
" DO NOT EDIT THE NEXT LINE, this is autogenerated
"
" ============================================================

" === Global Settings ===
set modeline
set encoding=utf-8
set mouse=a
set ignorecase
set smartcase
set foldenable
set foldmethod=marker
set t_Co=256
set backspace=indent,eol,start 
set incsearch
set lazyredraw
set showmatch
set showcmd
set hlsearch
set nu
set ruler
set autoread
set nobackup
set noerrorbells
set novisualbell
set t_vb=
set background=dark
set tm=500

" === Syntax Highlighting & auto-indent ===
syntax on
syntax enable
set antialias
filetype on
filetype plugin on 
filetype indent on
set autoindent
set smartindent
set number

" === Wildmenu ===
" Controling what is viewed in expanding list when typing :<command> <Tab>
set wildmenu
set wildmode=longest,list,full

" Ignore these file types (wouldn't make sense to open in vim)
set wildignore=.svn,CVS,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

" ============================================================

" === Plugins ====

" vim-plug plugins
call plug#begin('~/.vim/plugged')

" Vimtex - https://github.com/lervag/vimtex
Plug 'lervag/vimtex'

" Nerdtree - https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin' 

" Lightline - https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'

" Fzf - https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git-gutter - https://github.com/airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'

" Syntastic - https://github.com/vim-syntastic/syntastic
Plug 'vim-syntastic/syntastic'

" Ultisnips - https://github.com/sirver/ultisnips
Plug 'sirver/ultisnips'
"
" Snippets repo for Ultisnips
Plug 'honza/vim-snippets'

" YouCompleteMe - Auto-completion text engine
" Plug 'Valloric/YouCompleteMe'

" Super Tab - For key-mappings
Plug 'ervandew/supertab'

" Pandoc
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

" Scala
Plug 'derekwyatt/vim-scala'

" Fish
Plug 'dag/vim-fish'

" Fonts
Plug 'ryanoasis/vim-devicons'

" Tmux integration
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" ===  LastLine Plugin SetUp ===

" Lastline - Necessaary for lastline plugin
set laststatus=2

" ===  YouCompleteMe SetUp ===

" make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'

" ===  UltiSnips SetUp ===

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsListSnippets="<C-l>"

" ===  NERD Tree SetUp ===
"
" To toggle window
map <C-f> :NERDTreeToggle<CR>

" https://medium.com/@victormours/a-better-nerdtree-setup-3d3921abc0b9
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

" Open NERDTree on StartUp - https://stackoverflow.com/questions/1759737/auto-open-nerdtree-in-vim
au VimEnter *  NERDTree
autocmd VimEnter * wincmd p

let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
let g:NERDTreeGitStatusShowIgnored = 1
let g:NERDTreeGitStatusUseNerdFonts = 1 
let g:NERDTreeGitStatusUntrackedFilesMode = 'all'
let g:NERDTreeGitStatusShowClean = 1
let NERDTreeQuitOnOpen = 1

" Quit when last tab - https://stackoverflow.com/questions/2066590/automatically-quit-vim-if-nerdtree-is-last-and-only-buffer
autocmd bufenter * if winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()

" ===  Ag ===

" For using AG command https://github.com/ggreer/the_silver_searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

" ===  VIMTEX ===

" vimtex build options
let g:vimtex_compiler_latexmk = {
            \ 'build_dir' : 'build',
            \}
let g:vimtex_view_method = 'skim'

" === Markdown+Pandoc ===

" For previewing markdonw files
let vim_markdown_preview_github=1

map <C-p> :Pandoc --filter pandoc-xnos --citeproc

" ============================================================

" === File Specific Settings ===


"" === General Style Functions ===
"
fu Tab_style_2space()
  set shiftwidth=2
  set expandtab
  set tabstop=2
  set softtabstop=2
endf

fu Pep_max_line()
  set colorcolumn=80
endf

fu Git_commit_view()
  highlight ColorColumn ctermbg=0 guibg=blue
  set colorcolumn=50,72
endf

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" === Git Commit Files ===

au BufRead,BufNewFile COMMIT_EDITMSG, call Git_commit_view()

" For displaying commit emojis
au BufRead,BufNewFile COMMIT_EDITMSG, set splitright 
au BufRead,BufNewFile COMMIT_EDITMSG, NERDTreeClose | vnew ~/.git-hint.txt| 0read ! cheat git-emoji

" === C Files ===
 
" C: prevents insertion of '*' at the beginning of every line in a comment
au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r
au BufRead,BufNewFile *.c,*.h,*.cpp,*.md call Tab_style_2space()
au BufRead,BufNewFile *.c,*.h,*.cpp, call Pep_max_line()
au BufRead,BufNewFile *.c,*.h match BadWhitespace /\s\+$/

" === Python Files ==
"
let python_highlight_all=1
 
" C: prevents insertion of '*' at the beginning of every line in a comment
au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r
au BufRead,BufNewFile *py,*pyw,*.md call Tab_style_2space()
au BufRead,BufNewFile *py,*pyw, call Pep_max_line()

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /\s\+$/

" Add default set of ultisnips
autocmd FileType python UltiSnipsAddFiletypes python

" === Fish ===

" Set up :make
autocmd FileType fish compiler fish
autocmd FileType fish setlocal textwidth=79
autocmd FileType fish setlocal foldmethod=expr

" === Makefile ===

au BufRead,BufNewFile Makefile* set noexpandtab

" === strace ===

au BufRead,BufNewFile *.strace set filetype=strace

" === Markdown ===

au BufRead,BufNewFile *.md call Tab_style_2space()

" Add ultisnips
autocmd FileType markdown UltiSnipsAddFiletypes markdown
