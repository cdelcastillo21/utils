set nocompatible " Must be the first line
" DO NOT EDIT THE NEXT LINE, this is autogenerated
"
" === Global Settings ===
set modeline
set encoding=utf-8
set mouse=a
set ignorecase
set smartcase
set foldenable
set foldmethod=marker
set t_Co=256
set backspace=indent,eol,start 
set incsearch
set lazyredraw
set showmatch
set showcmd
set hlsearch
set nu
set ruler
set autoread
set nobackup
set noerrorbells
set novisualbell
set t_vb=
set background=dark
set colorcolumn=80
set tm=500

" === Syntax Highlighting & auto-indent ===
let python_highlight_all=1
syntax on
syntax enable
set ofu=syntaxcomplete#Complete
set antialias
filetype on
filetype plugin on 
filetype indent on
set autoindent
set smartindent
set number

" === Wildmenu ===
" Controling what is viewed in expanding list when typing :<command> <Tab>
set wildmenu
set wildmode=longest,list,full

" Ignore these file types (wouldn't make sense to open in vim)
set wildignore=.svn,CVS,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

" === Coding Style ===
"
fu Carlos_style()
  set shiftwidth=2
  set expandtab
  set tabstop=2
  set softtabstop=2
endf

au BufRead,BufNewFile *py,*pyw,*.c,*.h,*.cpp call Carlos_style()
au BufRead,BufNewFile Makefile* set noexpandtab

" strace settings
au BufRead,BufNewFile *.strace set filetype=strace

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
au BufRead,BufNewFile *.k,*.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
 
" Python: not needed, C: prevents insertion of '*' at the beginning of every line in a comment
au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r
 
" " Custom Status Line - Uncomment if not using Lightline
" set statusline=   " clear the statusline for when vimrc is reloaded
" set statusline+=%-3.3n\                      " buffer number
" set statusline+=%f\                          " file name
" set statusline+=%h%m%r%w                     " flags
" set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
" set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
" set statusline+=%{&fileformat}]              " file format
" set statusline+=%=                           " right align
" set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
" set statusline+=%b,0x%-8B\                   " current char
" set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
set laststatus=2

" vim-plug plugins
call plug#begin('~/.vim/plugged')

" Vimtex - https://github.com/lervag/vimtex
Plug 'lervag/vimtex'

" Nerdtree - https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree'

" Lightline - https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'

" Fzf - https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git-gutter - https://github.com/airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'

" Syntastic - https://github.com/vim-syntastic/syntastic
Plug 'vim-syntastic/syntastic'

" Ultisnips - https://github.com/sirver/ultisnips
Plug 'sirver/ultisnips'
"
" Snippets repo for Ultisnips
Plug 'honza/vim-snippets'

" YouCompleteMe - Auto-completion text engine
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

" Super Tab - For key-mappings
Plug 'ervandew/supertab'

call plug#end()

" Mappings for controlling plugins
"
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" " If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" NERD Tree - Pops up file browser
map <C-f> :NERDTreeToggle<CR>

" Lastline - Necessaary for lastline plugin
set laststatus=2

" For using AG command https://github.com/ggreer/the_silver_searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

" vimtex build options
let g:vimtex_compiler_latexmk = {
            \ 'build_dir' : 'build',
            \}
let g:vimtex_view_method = 'skim'

